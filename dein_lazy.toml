# [[plugins]]
# build = './install.sh nightly'
# repo = 'Shougo/deoplete.nvim'
#hook_source = '''
  # let g:deoplete#enable_at_startup = 1
  # inoremap <expr><tab> pumvisible() ? "\<C-n>" :
    # \ neosnippet#expandable_or_jumpable() ?
    # \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
# '''
# on_event = 'InsertEnter'

# [[plugins]]
# repo = 'Shougo/neosnippet.vim'
# hook_source = '''
  # imap <C-k> <Plug>(neosnippet_expand_or_jump)
  # smap <C-k> <Plug>(neosnippet_expand_or_jump)
  # xmap <C-k> <Plug>(neosnippet_expand_target)
  # if has('conceal')
    # set conceallevel=2 concealcursor=niv
  # endif
# '''
# on_event = 'InsertEnter'
# on_ft = ['snippet']
# depends = ['neosnippet-snippets']

# [[plugins]]
# repo = 'carlitux/deoplete-ternjs'

[[plugins]]
repo = 'neoclide/coc.nvim'
branch = 'release'
on_event = 'InsertEnter'
hook_source = '''
  inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  inoremap <expr> <ENTER> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
'''
